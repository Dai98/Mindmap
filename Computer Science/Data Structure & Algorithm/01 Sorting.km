{
    "root": {
        "data": {
            "id": "cpgx4hb0qw80",
            "created": 1672582814170,
            "text": "Sorting",
            "font-size": 24
        },
        "children": [
            {
                "data": {
                    "id": "cpgx9v57k280",
                    "created": 1672583236115,
                    "text": "Selection Sort",
                    "font-size": 18,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cpgxa5qocx40",
                            "created": 1672583259181,
                            "text": "Time Complexity O(n^2)",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cphphz6iygg0",
                            "created": 1672662862893,
                            "text": "Space Complexity O(1)",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cphpk2lock80",
                            "created": 1672663027067,
                            "text": "Intuition",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cphpks71gcw0",
                                    "created": 1672663082778,
                                    "text": "For elements in k to n-1, select the max/min element in this range and put it in the k index. \nRepeat this process for k equals from 0 to n-1.",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cphppa1jov40",
                            "created": 1672663435085,
                            "text": "Process",
                            "font-size": 16,
                            "expandState": "expand",
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cphppfvkp0g0",
                                    "created": 1672663447784,
                                    "text": "Assume conducting sorting in ascending order\n1. In range k to n-1 (k=0 initially), find the minimum element, whose index is m\n2. Swap the elements on k and m\n3. k = k + 1\n4. Repeat step 1, 2, 3 until k=n-1",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cphpsn9vmc80",
                    "created": 1672663698979,
                    "text": "Bubble Sort",
                    "font-size": 18,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cpizywtk0680",
                            "created": 1672793961001,
                            "text": "Time Complexity O(n^2)",
                            "font-size": 16,
                            "expandState": "expand",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpizz6she5k0",
                            "created": 1672793982704,
                            "text": "Space Complexity O(1)",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpizzdq7jso0",
                            "created": 1672793997804,
                            "text": "Intuition",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cpizzjbtk880",
                                    "created": 1672794009994,
                                    "text": "On range 0 to n-1, Swap adjacent elements if the element on the left is larger/smaller than the element on the right. \nMove to the next two adjacent elements. When iterate through all the elements in the array, the last element is the min/max element in the array. \nRepeat this process on 0 to n-2, n-3, n-4, etc.",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cpj021vnk8g0",
                            "created": 1672794207104,
                            "text": "Optimization",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cpj025ll7vk0",
                                    "created": 1672794215203,
                                    "text": "When no swapping happens during iteration, the given array is already sorted. \nWe can terminate sorting in this case.Â ",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cpj03av6pps0",
                            "created": 1672794305031,
                            "text": "Process",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cpj0fbu0am80",
                                    "created": 1672795247507,
                                    "text": "Assume conducting sorting in ascending order\n1. In range 0 to k (k=n-1 initially)\n2. Set i=0\n3. If element on i is larger than i+1, swap elements on i and i+1\n4. i = i + 1\n5. Repeat 3, 4 until i=k-1\n6. If no swapping happens in step 5, terminate sorting\n7. k = k - 1\n8. Repeat 2, 5, 6, 7 until k=1 (No need to sort when k=0)",
                                    "layout": null,
                                    "font-size": 16
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cphpsu0sumw0",
                    "created": 1672663713668,
                    "text": "Insertion Sort",
                    "font-size": 18,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cpjhybwoyn40",
                            "created": 1672844695456,
                            "text": "Time Complexity O(n^2)",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpjhyjbhxrc0",
                            "created": 1672844711589,
                            "text": "Space Complexity O(1)",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpjhyqgkm8w0",
                            "created": 1672844727133,
                            "text": "Intuition",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cpjhyu69mlc0",
                                    "created": 1672844735217,
                                    "text": "Keep a sorted area at the start of the array\nThen increase the sorted area by inserting the following element into the correct position",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cpjhzhe9xm00",
                            "created": 1672844785768,
                            "text": "Process",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cpjhzkpzwaw0",
                                    "created": 1672844793007,
                                    "text": "Assume conducting sorting in ascending order\n1. In range 0 to k (k=0 initially)\n2. Get the element on index k+1 and insert it into the correct position on 0 to k\n3. k = k+1\n4. Repeat step 2,3 until k=n-1",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cphpt0qdoeg0",
                    "created": 1672663728275,
                    "text": "Merge Sort",
                    "font-size": 18,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cplz1704agg0",
                            "created": 1673095998654,
                            "text": "Time Complexity O(n log(n))",
                            "font-size": 16
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cplz1fw7fmw0",
                            "created": 1673096018008,
                            "text": "Space Complexity O(n)",
                            "font-size": 16
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cplz1l8tzy00",
                            "created": 1673096029656,
                            "text": "Intuition",
                            "font-size": 16
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cplz1si3x480",
                                    "created": 1673096045454,
                                    "text": "Keep the left half of the given array sorted, then keep the right half of the array sorted. \nThen merge the left and the right part of the array to keep it sorted",
                                    "font-size": 16
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cplz1ogdhug0",
                            "created": 1673096036642,
                            "text": "Process",
                            "font-size": 16
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cplz31wtxko0",
                                    "created": 1673096144300,
                                    "text": "1. In range 0 to k (k=n-1 initially), find mid=(k-0)/2+1\n2. Recursively keep 0 to mid sorted (Stop recursion when left==right)\n3. Recursively keep mid to k sorted (Stop recursion when left==right)\n4. Merge 0 to mid and mid to k by putting elements in a new array with ascending/descending order",
                                    "font-size": 16
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cphpt6orz0g0",
                    "created": 1672663741239,
                    "text": "Quick Sort",
                    "font-size": 18,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cpm0sv8jguw0",
                            "created": 1673100988348,
                            "text": "Time Complexity O(n log(n))",
                            "font-size": 16
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpm0t2nr37s0",
                            "created": 1673101004506,
                            "text": "Space Complexity O(1)",
                            "font-size": 16
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpm0t8r3m3s0",
                            "created": 1673101017769,
                            "text": "Background",
                            "font-size": 16
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cpm0tf4snzc0",
                                    "created": 1673101031657,
                                    "text": "Dutch National Flag Problem: Give an unsorted array and a target number,\nPut elements less than the target number on the left, \nput elements equal to the target number in the middle, \nput elements greater than the target number on the right. \nUse double pointers and swapping.",
                                    "font-size": 16
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cpm0v3d093c0",
                            "created": 1673101162761,
                            "text": "Intuition",
                            "font-size": 16
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cpm0v5fvya00",
                            "created": 1673101167289,
                            "text": "Process",
                            "font-size": 16
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "fresh-blue",
    "version": "1.4.43"
}