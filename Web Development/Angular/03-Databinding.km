{
    "root": {
        "data": {
            "id": "ctc2tjkmq5s0",
            "created": 1686715717735,
            "text": "Databinding"
        },
        "children": [
            {
                "data": {
                    "id": "ctc2tq335q80",
                    "created": 1686715731912,
                    "text": "What is databinding",
                    "font-size": 16,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ctc2tv6le540",
                            "created": 1686715743008,
                            "text": "Databinding is communication between the html template and typescript codes/business logic",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "ctc2uw5cosw0",
                    "created": 1686715823474,
                    "text": "Output data",
                    "font-size": 16,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ctc2vdpwfnc0",
                            "created": 1686715861722,
                            "text": "String Interpolation",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ctc2z7ipxi80",
                                    "created": 1686716161684,
                                    "text": "Inside html template, you can insert any TypeScript expression, as long as they are:\n1. Inside curly brackets {{ expression }}\n2. The expression returns a string value\n3. Any variables/functions used in expression is defined in the component class\n4. There is no condition statements in the expression (if-else, loops, etc.)",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctc30hfdzfk0",
                                    "created": 1686716261614,
                                    "text": "e.g. <p>Server with Id {{ serverId }} has status {{ getServerStatus() }}</p>",
                                    "layout": null,
                                    "font-size": 16
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "ctc2ve30bxk0",
                            "created": 1686715862514,
                            "text": "Property Binding",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ctc36n7z7sg0",
                                    "created": 1686716744412,
                                    "text": "For a html tag, you can make attributes of html dynamic by binding the value of an attribute with a TypeScript expression",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctc39ijzso00",
                                    "created": 1686716969347,
                                    "text": "Syntax:  <tag [attribute]=\"expression\"></tag>\nYou need to put the attribute in [], and the TypeScript expression between \"\"",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctc3auhattk0",
                                    "created": 1686717073669,
                                    "text": "e.g. <button [disabled]=\"getButtonDisable()\"></button>",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "ctc2uzalueg0",
                    "created": 1686715830322,
                    "text": "React to user events",
                    "font-size": 16,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ctc2vii1dlk0",
                            "created": 1686715872130,
                            "text": "Event binding",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ctc3hptk1lk0",
                                    "created": 1686717612076,
                                    "text": "For some html tags, you can bind a function to an event when a user activity happens",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctc3iaznlrs0",
                                    "created": 1686717658157,
                                    "text": "Syntax: <tag (event)=\"function()\"></tag>\nYou need to put the event name in (), and TypeScript function invocation between \"\"\nEvent name is different from html builtin ones, basically without \"on\" prefix",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctc3jbutfs00",
                                    "created": 1686717738405,
                                    "text": "e.g. <button (click)=\"onButtonClicked()\"></button>",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctc3mgs4wa80",
                                    "created": 1686717984220,
                                    "text": "In some cases, we need to pass data when a certain events happens, \nand you can add $event parameter when you call the function\nThis will pass all relative context to the function\ne.g. <input type=\"text\" (input)=\"onFormInput($event)\"></input>\nAnd in the function you can write\nfunction onFormInput(event: Event) {\n\tname = (<HTMLInputElement>event.target).value;\n}",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "ctc2v2kw02g0",
                    "created": 1686715837474,
                    "text": "Two way binding",
                    "font-size": 16,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ctcqglmkce00",
                            "created": 1686782410110,
                            "text": "Two way binding can only used for form input elements (<input><select><textarea>, etc.), \nand you must add FormsModule in app.module.ts to use two way binding",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ctcqi6uc5wg0",
                            "created": 1686782534656,
                            "text": "Syntax:   <tag [(ngModel)]=\"variable\">\ne.g.   <input id=\"username\" [(ngModel)]=\"username\">\nWhen the value of the input changes, the variable \"username\" in TypeScript will also change\nWhenever the value of variable \"username\" changes, it will also reflect in the UI",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "ctov73bwv3c0",
                    "created": 1688014490036,
                    "text": "Communication between components",
                    "font-size": 16,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ctov7fbrls00",
                            "created": 1688014516148,
                            "text": "By default, attributes of a component are only accessible within the same component",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ctov7u9gfow0",
                            "created": 1688014548660,
                            "text": "Passing data from parent components to child components",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ctovf47enqw0",
                                    "created": 1688015118853,
                                    "text": "We can build self-customized property",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctov8a0tjhc0",
                                    "created": 1688014582966,
                                    "text": "Add @Input() decorator at the beginning of the attribute in children components\ne.g. @Input() name: string;\nThen in the template of parent component, you can pass data from parent component to child component\ne.g. <child-component [name]=\"parentName\"></child-component>",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctovb61sjrc0",
                                    "created": 1688014809411,
                                    "text": "An alias can be added to @Input() decorator when attribute in the component class and template cannot match\ne.g.@Input(\"parentName\") name: string\n<child-component [parentName]=\"parentName\"></child-component>\n// The value passed to parentName attribute will be assigned to \"name\" attribute",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "ctovffxq1bs0",
                            "created": 1688015144389,
                            "text": "Passing data from child components to parent components",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ctovfq4cb340",
                                    "created": 1688015166557,
                                    "text": "We can build self-customized events",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctovlxn8qi80",
                                    "created": 1688015653122,
                                    "text": "1. Define self-customized event in the child component\nSyntax: @Output() eventName = new EventEmitter<ReturnDataType>();\ne.g. @Output() userCreated = new EventEmitter<{username: string, passowrd: string}>();\n\n2. Emit data in child component\ne.g. onUserCreated() {\nthis.userCreated.emit({\n   username: this.username,\n   password: this.password\n});\n}",
                                    "layout": null,
                                    "font-size": 16
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctox8sevs1s0",
                                    "created": 1688020265219,
                                    "text": "3. Define what to do with data in parent component template\n<user-info (userCreated)=\"handleUserCreated($event)\"></user-info>\n\nMeanwhile in parent component ts file\nhandleUserCreated(userData: {username: string, password: string}) {\n\tconsole.log(userData);\n}",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctoxcadias80",
                                    "created": 1688020539410,
                                    "text": "Similarly, we can pass a string literal to @Output() decorator to create an alias for self-customized event, just like @Input() decorator",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "ctoy55pfc540",
                    "created": 1688022801808,
                    "text": "Local Reference",
                    "font-size": 16,
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ctoy5aatzgo0",
                            "created": 1688022811809,
                            "text": "In Angular template, you can set a name for a HTML element and use this name anywhere in the template only",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ctoy5pec2bc0",
                            "created": 1688022844673,
                            "text": "e.g.:\n<input type=\"text\" #reference>\n<button (click)=onClickButton(reference)>\nThis will pass the whole HTML element to onClickButton method, and you can fetch the value of the input element in the method",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ctoy6wglxi00",
                            "created": 1688022938412,
                            "text": "Compared to [(ngModel)] (two-way-binding), this method will not update the attribute value when the value of input element is changed, \nand will only fetched the newest value when the event happens. This method is often used as an alternative of two-way-binding.",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ctt63mpnwmg0",
                            "created": 1688451490805,
                            "text": "@ViewChild",
                            "font-size": 16,
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ctt642egve00",
                                    "created": 1688451524956,
                                    "text": "For local reference, we can only use the reference name in the template. However, Angular provides us @ViewChild() decorator to access the element in ts file.",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctt64ktceyo0",
                                    "created": 1688451565038,
                                    "text": "e.g.\n<input type=\"text\" #reference>\n// Meanwhile in TypeScript component\n@ViewCode(\"reference\") referenceInputElement: ElementRef;\n// Where the string inside the decorator is the name of the local reference\n// Inside event handler methods you can access the value of the element by\nlet value = this.refereceInputElement.nativeElement.value;",
                                    "font-size": 16,
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctt66c8lkgw0",
                                    "created": 1688451703098,
                                    "text": "@ViewChild() is meant for retrieving the value of an HTML element, not to modify the value of the element. \nDirectly change the value of DOM with ViewChild is feasible, but STRONGLY NOT RECOMMENDED",
                                    "font-size": 16
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ctt6892zmww0",
                                    "created": 1688451852957,
                                    "text": "For Angular 8+, set @ViewCode(\"local-reference-name\", {static: true/false})\nIf the attribute is accessed in ngOnInit method, then set true\nOtherwise set false. For Angular 9+, {static: false} is not necessary",
                                    "font-size": 16
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "fresh-blue",
    "version": "1.4.43"
}